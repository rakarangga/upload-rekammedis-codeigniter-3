<?php

defined('BASEPATH') OR exit('No direct script access allowed');

class Berkas extends Restfull_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        
        $this->load->model('Berkas_m');
        $this->load->model('Pasien_m');
        $this->methods['berkass_get']['limit'] = 500; // 500 requests per hour per berkas/key
        $this->methods['berkass_post']['limit'] = 100; // 100 requests per hour per berkas/key
        $this->methods['berkass_delete']['limit'] = 50; // 50 requests per hour per berkas/key
    }

    public function index_get()
    {
        
        // $berkass = [
        //     ['id' => 1, 'name' => 'John', 'email' => 'john@example.com', 'fact' => 'Loves coding'],
        //     ['id' => 2, 'name' => 'Jim', 'email' => 'jim@example.com', 'fact' => 'Developed on CodeIgniter'],
        //     ['id' => 3, 'name' => 'Jane', 'email' => 'jane@example.com', 'fact' => 'Lives in the USA', ['hobbies' => ['guitar', 'cycling']]],
        // ];
     
        $id = $this->get('id');
        $getBy = $this->Pasien_m->get_berkas_by($id, true);
        $berkass =  $getBy;
        // If the id parameter doesn't exist return all the berkass
        if ($id === NULL)
        {
          
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'error' => 'Tidak Tersedia'
                ], Restfull_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            
        }

        // Find and return a single record for a particular berkas.
        else {
            $id = (int) $id;
         
            // Validate the id.
            if ($id <= 0)
            {
                // Invalid id, set the response and exit.
                $this->response(NULL, Restfull_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
            }

            // Get the berkas from the array, using the id as key for retrieval.
            // Usually a model is to be used for this.
           
            $berkas = NULL;

            if (!empty($berkass))
            {
                foreach ($berkass as $value)
                {
                    if (isset($value['idpasien']) && intval($value['idpasien']) === $id)
                    {
                       
                        $url = file_exists(FCPATH.$value['namaberkas']) ? base_url(str_replace('./assets','assets',$value['namaberkas'])) :  base_url('/assets/dist/img/user.png');
                        $value['URL'] = $url;
                        $berkas[] = $value;
                    }
                }
            }

            if (!empty($berkas))
            {
                $this->set_response([
                    'status' => TRUE,
                    'error' => '',
                    'berkas' => $berkas
                ], Restfull_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                $this->set_response([
                    'status' => FALSE,
                    'error' => 'Tidak Tersedia Berkas'
                ], Restfull_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }
    }

    /* public function berkass_post()
    {
        // $this->some_model->update_berkas( ... );
        $error = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'error' => 'Added a resource'
        ];

        $this->set_response($error, Restfull_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function berkass_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, Restfull_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $error = [
            'id' => $id,
            'error' => 'Deleted the resource'
        ];

        $this->set_response($error, Restfull_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    } */

}
